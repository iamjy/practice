/**
 * @file
 * @author
 * @date
 * @brief
 * @see
 */

#ifndef _API_H_
#define _API_H_

/*****************************************************************************
 * Header files
 *****************************************************************************/

/*****************************************************************************
 * Type definitions
 *****************************************************************************/

/*****************************************************************************
 * Enumerations
 *****************************************************************************/

/*****************************************************************************
 * Macro definitions
 *****************************************************************************/

/*****************************************************************************
 * Structures
 *****************************************************************************/
/**
 *
 */

/*****************************************************************************
 * Global variables
 *****************************************************************************/

/*****************************************************************************
 * Static variables
 *****************************************************************************/

/*****************************************************************************
 * Extern variables
 *****************************************************************************/

/*****************************************************************************
 * Function prototypes
 *****************************************************************************/
 /** @brief
  *  @param
  *  @return
  */
 int my_envp (char **envp);
 int my_getopt (int argc, char **argv);
 void my_getopt_usage (char *cmd);

/** @brief
 *  @param
 *  @return
 */
FILE *fopen_read(const char *f_name);
FILE *fopen_write(const char *f_name, bool mode_a);
FILE *fopen_read_binary(const char *f_name);
FILE *fopen_write_binary(const char *f_name, bool mode_a);
FILE *fopen_read_write(const char *fname, bool mode_a);

/** @brief
 *  @param
 *  @return
 */
void discard1(void);
void discard2(void);
void discard3 (int *input);
void discard4 (int *input);
int32_t loop1(int32_t *addr);
int32_t loop2(volatile int32_t *addr);

#endif /* _POINTER_H_ */
