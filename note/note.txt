1. 매크로 정의는 등호(=)를 포함하는 하나의 문장이다.
2. 매크로는 등호 기준 좌측 문자에 우측 문자열을 연관시킨다.
3. 따옴표("")는 문자열을 일부로 포함된다.
4. 마지막에 역슬래시(\)를 사용하여 행이 다음 줄로 계속 이어질 수 있다.
5. 등호 바로 왼쪽 또는 오른쪽의 공백이나 탭 문자들은 모두 제거된다.
6. 매크로 참조 시, 매크로를 ( )나 { }로 둘러싸고, 그 앞에 $를 붙인다.
7. 문자 한 자로 이뤄진 매크로는 ( )나 { }를 사용할 필요가 없다.
   - $1 == $(1) == ${1}
8. 매크로는 반드시 사용할 항목보다 먼저 정의해야 한다.
9. 내부적으로 정의된 매크로가 지는 가장 큰 장점은,
   - 확장자 규칙과 함께 사용할 수 있다.
9.1 C 컴파일러 옵션은 주로 CFLAGS에,
    링커(LD)의 옵션은 주로 LDFLAGS에 저장한다.
10. 명령 행에서 매크로 정의가 여러 단어들로 구성되어 있을 경우(문자열),
    해당 부분을 ('...')나 ("...")로 묶어줘야 한다.
11. 한 자 이상의 문자로 구성된 이름일 경우에는 ( )나 { }를 사용하여 참조해야 한다.
12. 매크로 할당 우선순위
    1) make 명령 입력 시 make 명령 다음에 입력한 매크로
    2) 기술 파일의 매크로 정의
    3) 현재 shell 환경 변수
    4) make 내부(기본) 정의

    make -e 옵션으로 억지로 기술 파일보다 환경 변수를 우선적으로 참고하도록 변경함.

13. OBJS := $(SRCS:.c=.o)는,
    - make는 (SRCS)를 평가하고, : 뒤에 따라오는 문자열을 찾은 다음,
      등호 기호 뒤의 문자열로 치환한다.
14. 문자열 치환은 매우 엄격하게 제한된다.
    - 매크로의 마지막 부분이나 공백 문자 바로 앞까지만 적용된다.
    - 문자열 치환 기능은 버전에 따라 천차만별이다. (해당 버전 문서 참고)
15. $@ : 현재 타깃으로 간주
    $? : 필요 항목들의 명단으로 간주
16. 확장자 규칙 : 미리 정의해 놓은 일반화한 기술 파일 항목
17. Target이 만들어지기 전에 필요한 항목 파일 가운데 어떤 파일이 만들어 져야 하는지,
    확인한다.
    - 필요 항목을 확인할 때, 실제 Target을 변경하거나 만드는 순서는 정반대로,
      항상 계층의 하위에서 상위 항목 차례이다.
17.2 사용자가 target으로 지정한 iodat.o를 포함하는 행을 먼저 확인한다.
     - 해당되는 것이 없을 경우 .o 확장자가 필요하다는 것을 인식하며,
       현재 디렉토리에서 iodat.o를 만드는 데 사용할 수 있는 다른 파일을 찾는다.
       1) iodat.o와 같은 이름이 있어야 한다.
       2) 중요 확장자를 갖고 있어야 한다.
       3) 기존 확장자 규칙에 따라 iodat.o를 만드는 데 사용할 수 있어야 한다.
18. 프로젝트가 확장 : 재귀 호출 기법 사용
    - 대형 프로젝트에서 make는 많이 변형된다.
      1) 하나 이상의 디렉토리를 사용하는 작성 과정
      2) 컴파일러 옵션을 변경하는 경우
      3) 표시되지 않은 의존 관계
19. make에 제한이 너무 많다.
    - make가 필요항목을 찾고 확장자 규칙을 적용하는 방법은
      컴파일러에 엄격한 파일 이름 규약을 사용하기 때문이다.
20. 더미 타겟 (더미 필요 항목)을 사용하면 파일간에 연관된 의존 항목에
    관여하지 않으면서 작업을 할 수 있다.
    - 더미 타겟은 항상 최신 버전이 아니다.
    - 더미 필요 항목은 항상 그 타겟보다 최신 파일이기 때문에 make는 타겟을
      항상 다시 작성해야 한다.
21. 존재하지 않는 파일 이름을 필요 항목으로 사용한다면, 그 뒤에 아무런 명령어도
    존재하지 않더라도 어디에선가 타겟으로 표시되어야 한다.
22. 소스 파일과 오브젝트 파일을 서로 다른 디렉토리에 보관한다면,
    기본 규칙을 사용하지 못하고, 모든 의존 관계를 직접 지정해 주어야 하기 때문에,
    - 작성한 실행 파일이 위치하는 디렉토리에 오브젝트 파일을 저장하면서,
      모든 프로젝트 멤버의 공통 영역에서 소스 파일을 관리하는 방법을 지향하자.
23. 일반적으로 make를 재귀적으로 사용하면, 작성 중에 동적으로 정보를 결정하거나
    작성의 다른 부분으로 정보를 전달하기를 원할 때의 문제를 해결할 수 있다.
24. 재귀 호출 : 내부 매크로를 사용하는 것이 더 좋다.
25. make는 디렉토리를 처리할 수 있는 트릭을 제공한다.
26. $?를 제외한 모든 내부 매크로는 D 또는 F 변경자를 사용할 수 있다.
    D : 경로 이름을 단축시켜 이름에서 디렉토리 부분만 남긴다.
    F : 이름에서 파일 부분만 잘라낸다.
    
